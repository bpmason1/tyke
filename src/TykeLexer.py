# Generated from ./Tyke.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,339,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,
        1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,
        1,40,1,40,1,40,4,40,258,8,40,11,40,12,40,259,1,41,1,41,3,41,264,
        8,41,1,42,1,42,1,42,1,43,1,43,5,43,271,8,43,10,43,12,43,274,9,43,
        1,44,1,44,1,45,3,45,279,8,45,1,46,1,46,3,46,283,8,46,1,47,3,47,286,
        8,47,1,47,1,47,1,48,1,48,5,48,292,8,48,10,48,12,48,295,9,48,1,49,
        1,49,5,49,299,8,49,10,49,12,49,302,9,49,1,49,1,49,1,49,5,49,307,
        8,49,10,49,12,49,310,9,49,1,49,3,49,313,8,49,1,50,1,50,3,50,317,
        8,50,1,50,3,50,320,8,50,1,50,1,50,1,51,4,51,325,8,51,11,51,12,51,
        326,1,51,1,51,1,52,1,52,5,52,333,8,52,10,52,12,52,336,9,52,1,52,
        1,52,0,0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,0,93,0,95,0,97,0,99,0,101,46,103,47,105,48,1,0,7,1,0,48,
        57,3,0,65,90,95,95,97,122,1,0,49,57,4,0,10,10,12,13,39,39,92,92,
        4,0,10,10,12,13,34,34,92,92,2,0,9,9,32,32,2,0,10,10,13,13,346,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
        0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,1,107,1,0,0,0,3,109,1,0,0,0,
        5,111,1,0,0,0,7,115,1,0,0,0,9,118,1,0,0,0,11,120,1,0,0,0,13,122,
        1,0,0,0,15,129,1,0,0,0,17,131,1,0,0,0,19,133,1,0,0,0,21,135,1,0,
        0,0,23,138,1,0,0,0,25,141,1,0,0,0,27,143,1,0,0,0,29,146,1,0,0,0,
        31,148,1,0,0,0,33,151,1,0,0,0,35,155,1,0,0,0,37,158,1,0,0,0,39,162,
        1,0,0,0,41,167,1,0,0,0,43,173,1,0,0,0,45,177,1,0,0,0,47,181,1,0,
        0,0,49,184,1,0,0,0,51,189,1,0,0,0,53,194,1,0,0,0,55,199,1,0,0,0,
        57,207,1,0,0,0,59,209,1,0,0,0,61,216,1,0,0,0,63,221,1,0,0,0,65,227,
        1,0,0,0,67,234,1,0,0,0,69,238,1,0,0,0,71,243,1,0,0,0,73,245,1,0,
        0,0,75,247,1,0,0,0,77,249,1,0,0,0,79,251,1,0,0,0,81,254,1,0,0,0,
        83,263,1,0,0,0,85,265,1,0,0,0,87,268,1,0,0,0,89,275,1,0,0,0,91,278,
        1,0,0,0,93,282,1,0,0,0,95,285,1,0,0,0,97,289,1,0,0,0,99,312,1,0,
        0,0,101,319,1,0,0,0,103,324,1,0,0,0,105,330,1,0,0,0,107,108,5,123,
        0,0,108,2,1,0,0,0,109,110,5,125,0,0,110,4,1,0,0,0,111,112,5,100,
        0,0,112,113,5,101,0,0,113,114,5,102,0,0,114,6,1,0,0,0,115,116,5,
        45,0,0,116,117,5,62,0,0,117,8,1,0,0,0,118,119,5,58,0,0,119,10,1,
        0,0,0,120,121,5,44,0,0,121,12,1,0,0,0,122,123,5,114,0,0,123,124,
        5,101,0,0,124,125,5,116,0,0,125,126,5,117,0,0,126,127,5,114,0,0,
        127,128,5,110,0,0,128,14,1,0,0,0,129,130,5,61,0,0,130,16,1,0,0,0,
        131,132,5,40,0,0,132,18,1,0,0,0,133,134,5,41,0,0,134,20,1,0,0,0,
        135,136,5,61,0,0,136,137,5,61,0,0,137,22,1,0,0,0,138,139,5,33,0,
        0,139,140,5,61,0,0,140,24,1,0,0,0,141,142,5,60,0,0,142,26,1,0,0,
        0,143,144,5,60,0,0,144,145,5,61,0,0,145,28,1,0,0,0,146,147,5,62,
        0,0,147,30,1,0,0,0,148,149,5,62,0,0,149,150,5,61,0,0,150,32,1,0,
        0,0,151,152,5,97,0,0,152,153,5,110,0,0,153,154,5,100,0,0,154,34,
        1,0,0,0,155,156,5,111,0,0,156,157,5,114,0,0,157,36,1,0,0,0,158,159,
        5,120,0,0,159,160,5,111,0,0,160,161,5,114,0,0,161,38,1,0,0,0,162,
        163,5,116,0,0,163,164,5,114,0,0,164,165,5,117,0,0,165,166,5,101,
        0,0,166,40,1,0,0,0,167,168,5,102,0,0,168,169,5,97,0,0,169,170,5,
        108,0,0,170,171,5,115,0,0,171,172,5,101,0,0,172,42,1,0,0,0,173,174,
        5,108,0,0,174,175,5,101,0,0,175,176,5,116,0,0,176,44,1,0,0,0,177,
        178,5,109,0,0,178,179,5,117,0,0,179,180,5,116,0,0,180,46,1,0,0,0,
        181,182,5,105,0,0,182,183,5,102,0,0,183,48,1,0,0,0,184,185,5,101,
        0,0,185,186,5,108,0,0,186,187,5,105,0,0,187,188,5,102,0,0,188,50,
        1,0,0,0,189,190,5,101,0,0,190,191,5,108,0,0,191,192,5,115,0,0,192,
        193,5,101,0,0,193,52,1,0,0,0,194,195,5,98,0,0,195,196,5,111,0,0,
        196,197,5,111,0,0,197,198,5,108,0,0,198,54,1,0,0,0,199,200,5,112,
        0,0,200,201,5,97,0,0,201,202,5,99,0,0,202,203,5,107,0,0,203,204,
        5,97,0,0,204,205,5,103,0,0,205,206,5,101,0,0,206,56,1,0,0,0,207,
        208,5,59,0,0,208,58,1,0,0,0,209,210,5,115,0,0,210,211,5,116,0,0,
        211,212,5,114,0,0,212,213,5,117,0,0,213,214,5,99,0,0,214,215,5,116,
        0,0,215,60,1,0,0,0,216,217,5,116,0,0,217,218,5,121,0,0,218,219,5,
        112,0,0,219,220,5,101,0,0,220,62,1,0,0,0,221,222,5,119,0,0,222,223,
        5,104,0,0,223,224,5,105,0,0,224,225,5,108,0,0,225,226,5,101,0,0,
        226,64,1,0,0,0,227,228,5,100,0,0,228,229,5,111,0,0,229,230,5,117,
        0,0,230,231,5,98,0,0,231,232,5,108,0,0,232,233,5,101,0,0,233,66,
        1,0,0,0,234,235,5,105,0,0,235,236,5,110,0,0,236,237,5,116,0,0,237,
        68,1,0,0,0,238,239,5,118,0,0,239,240,5,111,0,0,240,241,5,105,0,0,
        241,242,5,100,0,0,242,70,1,0,0,0,243,244,5,43,0,0,244,72,1,0,0,0,
        245,246,5,45,0,0,246,74,1,0,0,0,247,248,5,42,0,0,248,76,1,0,0,0,
        249,250,5,47,0,0,250,78,1,0,0,0,251,252,5,42,0,0,252,253,5,42,0,
        0,253,80,1,0,0,0,254,255,3,83,41,0,255,257,5,46,0,0,256,258,7,0,
        0,0,257,256,1,0,0,0,258,259,1,0,0,0,259,257,1,0,0,0,259,260,1,0,
        0,0,260,82,1,0,0,0,261,264,5,48,0,0,262,264,3,95,47,0,263,261,1,
        0,0,0,263,262,1,0,0,0,264,84,1,0,0,0,265,266,5,46,0,0,266,267,3,
        87,43,0,267,86,1,0,0,0,268,272,3,91,45,0,269,271,3,93,46,0,270,269,
        1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,88,1,
        0,0,0,274,272,1,0,0,0,275,276,3,99,49,0,276,90,1,0,0,0,277,279,7,
        1,0,0,278,277,1,0,0,0,279,92,1,0,0,0,280,283,3,91,45,0,281,283,7,
        0,0,0,282,280,1,0,0,0,282,281,1,0,0,0,283,94,1,0,0,0,284,286,5,45,
        0,0,285,284,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,3,97,
        48,0,288,96,1,0,0,0,289,293,7,2,0,0,290,292,7,0,0,0,291,290,1,0,
        0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,98,1,0,0,
        0,295,293,1,0,0,0,296,300,5,39,0,0,297,299,8,3,0,0,298,297,1,0,0,
        0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,
        0,302,300,1,0,0,0,303,313,5,39,0,0,304,308,5,34,0,0,305,307,8,4,
        0,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,
        0,0,309,311,1,0,0,0,310,308,1,0,0,0,311,313,5,34,0,0,312,296,1,0,
        0,0,312,304,1,0,0,0,313,100,1,0,0,0,314,316,5,13,0,0,315,317,5,10,
        0,0,316,315,1,0,0,0,316,317,1,0,0,0,317,320,1,0,0,0,318,320,5,10,
        0,0,319,314,1,0,0,0,319,318,1,0,0,0,320,321,1,0,0,0,321,322,6,50,
        0,0,322,102,1,0,0,0,323,325,7,5,0,0,324,323,1,0,0,0,325,326,1,0,
        0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,328,329,6,51,
        0,0,329,104,1,0,0,0,330,334,5,35,0,0,331,333,8,6,0,0,332,331,1,0,
        0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,337,1,0,
        0,0,336,334,1,0,0,0,337,338,6,52,0,0,338,106,1,0,0,0,15,0,259,263,
        272,278,282,285,293,300,308,312,316,319,326,334,1,6,0,0
    ]

class TykeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    EQ = 11
    NEQ = 12
    LT = 13
    LTE = 14
    GT = 15
    GTE = 16
    AND = 17
    OR = 18
    XOR = 19
    TRUE = 20
    FALSE = 21
    LET = 22
    MUT = 23
    IF = 24
    ELIF = 25
    ELSE = 26
    BOOL = 27
    PACKAGE = 28
    SEMICOLON = 29
    STRUCT = 30
    TYPE = 31
    WHILE = 32
    KW_DOUBLE = 33
    KW_INT = 34
    VOID = 35
    ADD = 36
    SUBTRACT = 37
    MULTIPLY = 38
    DIVIDE = 39
    KW_POWER = 40
    DOUBLE = 41
    INTEGER = 42
    FIELD_REF = 43
    NAME = 44
    STRING = 45
    Newline = 46
    Whitespace = 47
    LineComment = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'def'", "'->'", "':'", "','", "'return'", "'='", 
            "'('", "')'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'and'", "'or'", "'xor'", "'true'", "'false'", "'let'", "'mut'", 
            "'if'", "'elif'", "'else'", "'bool'", "'package'", "';'", "'struct'", 
            "'type'", "'while'", "'double'", "'int'", "'void'", "'+'", "'-'", 
            "'*'", "'/'", "'**'" ]

    symbolicNames = [ "<INVALID>",
            "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "AND", "OR", "XOR", "TRUE", 
            "FALSE", "LET", "MUT", "IF", "ELIF", "ELSE", "BOOL", "PACKAGE", 
            "SEMICOLON", "STRUCT", "TYPE", "WHILE", "KW_DOUBLE", "KW_INT", 
            "VOID", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "KW_POWER", 
            "DOUBLE", "INTEGER", "FIELD_REF", "NAME", "STRING", "Newline", 
            "Whitespace", "LineComment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "EQ", "NEQ", "LT", "LTE", "GT", 
                  "GTE", "AND", "OR", "XOR", "TRUE", "FALSE", "LET", "MUT", 
                  "IF", "ELIF", "ELSE", "BOOL", "PACKAGE", "SEMICOLON", 
                  "STRUCT", "TYPE", "WHILE", "KW_DOUBLE", "KW_INT", "VOID", 
                  "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "KW_POWER", "DOUBLE", 
                  "INTEGER", "FIELD_REF", "NAME", "STRING", "ID_START", 
                  "ID_CONTINUE", "NON_ZERO_INTEGER", "POSITIVE_INTEGER", 
                  "SHORT_STRING", "Newline", "Whitespace", "LineComment" ]

    grammarFileName = "Tyke.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


