package main;

type struct { x: int, y: int } Point;
type struct { pt1: Point, pt2: Point } Line;
type struct { height: int, width: int, depth: int } Rect ;

def abyss() -> void {
  return;
}

def vanish(x: int, y: double) -> void {
  return;
}

def doAssign(data: int) -> int {
  let newVal = data ;
  return newVal ;
}

def assignMultiply() -> int {
  let calc = 3 * 9 ;
  return calc ;
}

def arithMultiGroup(first : int, second : int) -> int {
  let calc = (first + 6) * (second + 5) + 1;
  return calc ;
}

def returnCalcResult(first : int, second : int) -> int {
  return (first + 6) + 2 *(second + 5);
}

def retBool(x : int, y : int) -> bool {
  let isLessThan = x < y; 
  return isLessThan;
}

def one() -> int {
  return 1;
}

def floor_zero(x : int, y : int) -> int {
  if x < 0 {
    return 0;
  }

  return x;
}

def either_or(x : int, y : int) -> int {
  if x < 0 {
    return x;
  } else {
    return y;
  }

  return 0;
}

def if_elif_else_chain(x : int, y : int) -> int {
  if x == 0 {
    return 1;
  } elif y == 0 {
    return 2;
  } elif x > 1 {
    return 3;
  } elif y == 1 {
    return 4;
  } else {
    return 7;
  }

  return 0;
}

def pow(num : int, exp: int) -> int {
  if exp == 0 {
    return 1;
  }

  let mut total = 1;
  let mut counter = exp;
  while counter > 0 {
    total = total * num;
    counter = counter - 1;
  }
  return total;
}

def rise(line: Line) -> int {
  let y1 = line.pt1.y;
  let y2 = line.pt2.y;
  return y2 - y1;
}
