#! /usr/bin/bash

set -e

SCRIPTS_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
PROJECT_DIR=$(cd $SCRIPTS_DIR/.. && pwd)
VENV_DIR=$(echo $PROJECT_DIR/.venv)
SRC_DIR=$(echo $PROJECT_DIR/src)
BIN_DIR='./bin'
#APP_NAME=${1:-$(basename $PWD)}
APP_NAME=$(basename $PWD)

LLVM_ONLY=false

#while getopts n:h flag
#do
#  echo "${flag}"
#  case "${flag}" in
#    h) echo $LLVM_ONLY;; #LLVM_ONLY=${OPTARG};;
#    n) LLVM_ONLY=${OPTARG};;
#    *) ;; #echo "OH SNAP - unknown arg: ${flag}";; #exit 1;
#  esac
#done

# handle args starting with '--'
for arg in "$@"; do
  if [ "$arg" == "--llvm-only" ]; then
    LLVM_ONLY=true
  fi
done


if [ ! -d $VENV_DIR ]; then
  tput setaf 1
  echo "No virtualenv directory: .venv"
  tput sgr0
  exit 1
fi

. $VENV_DIR/bin/activate

if [ ! -d $BIN_DIR ]; then
  mkdir -p $BIN_DIR
fi

TMP_LLVM_DIR=$(mktemp -d)
# echo "TEMP DIR:  $TMP_LLVM_DIR"
function cleanup {
  rm -fr ${TMP_LLVM_DIR}
}
trap cleanup EXIT

python3 "${SRC_DIR}"/main.py $PWD/src > "${TMP_LLVM_DIR}"/main.ll

if [ $LLVM_ONLY == true ]; then
  cp -p "${TMP_LLVM_DIR}"/main.ll ./"${APP_NAME}".ll
  exit 0
fi

$SCRIPTS_DIR/build-llvm.sh $TMP_LLVM_DIR main
mv $TMP_LLVM_DIR/main $BIN_DIR/$APP_NAME
